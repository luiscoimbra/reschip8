// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fontset = require("./Fontset.bs.js");
var Js_math = require("bs-platform/lib/js/js_math.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Instruction = require("./Instruction.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

function getVariable(opcode) {
  switch (opcode.TAG | 0) {
    case /* KK */0 :
        return opcode._0 & 255;
    case /* N */1 :
        return opcode._0 & 15;
    case /* NNN */2 :
        return opcode._0 & 4095;
    case /* X */3 :
        return ((opcode._0 & 3840) >>> 8);
    case /* Y */4 :
        return ((opcode._0 & 240) >>> 4);
    
  }
}

var getEmpty_memory = new Uint8Array(4096);

var getEmpty_v = new Uint8Array(16);

var getEmpty_stack = new Uint16Array(16);

var getEmpty_ui = Belt_Array.make(32, Belt_Array.make(64, 0));

var getEmpty_keys = Belt_Array.make(16, /* Down */1);

var getEmpty = {
  memory: getEmpty_memory,
  v: getEmpty_v,
  i: 0,
  dt: 0,
  st: 0,
  pc: 512,
  sp: 0,
  stack: getEmpty_stack,
  ui: getEmpty_ui,
  keys: getEmpty_keys,
  halted: false
};

function loadFontSet(cpu) {
  console.log("Loading fontset");
  var memory = cpu.memory;
  for(var i = 0 ,i_finish = Fontset.get.length; i <= i_finish; ++i){
    memory[i] = Fontset.get[i];
  }
  return {
          memory: memory,
          v: cpu.v,
          i: cpu.i,
          dt: cpu.dt,
          st: cpu.st,
          pc: cpu.pc,
          sp: cpu.sp,
          stack: cpu.stack,
          ui: cpu.ui,
          keys: cpu.keys,
          halted: cpu.halted
        };
}

var Rom_not_found = Caml_exceptions.create("CPU.Rom_not_found");

function loadRom(romBuffer) {
  console.log("Adding rom to memory");
  if (romBuffer !== undefined) {
    var memory = getEmpty_memory;
    for(var i = 0 ,i_finish = romBuffer.length; i < i_finish; ++i){
      memory[512 + i | 0] = Caml_format.caml_int_of_string("0x" + Caml_array.get(romBuffer, i));
    }
    return {
            memory: memory,
            v: getEmpty_v,
            i: 0,
            dt: 0,
            st: 0,
            pc: 512,
            sp: 0,
            stack: getEmpty_stack,
            ui: getEmpty_ui,
            keys: getEmpty_keys,
            halted: false
          };
  }
  throw {
        RE_EXN_ID: Rom_not_found,
        Error: new Error()
      };
}

function $$fetch(cpu) {
  var pc = cpu.pc;
  var memory = cpu.memory;
  var codes = [
    memory[pc],
    memory[pc + 1 | 0]
  ];
  return [
          {
            memory: cpu.memory,
            v: cpu.v,
            i: cpu.i,
            dt: cpu.dt,
            st: cpu.st,
            pc: pc + 2 | 0,
            sp: cpu.sp,
            stack: cpu.stack,
            ui: cpu.ui,
            keys: cpu.keys,
            halted: cpu.halted
          },
          (Caml_array.get(codes, 0) << 8) + Caml_array.get(codes, 1) | 0
        ];
}

var decode = Instruction.get;

function execute(cpu, param) {
  var opcode = param[0];
  switch (param[1]) {
    case /* CLS */0 :
        return {
                memory: cpu.memory,
                v: cpu.v,
                i: cpu.i,
                dt: cpu.dt,
                st: cpu.st,
                pc: cpu.pc,
                sp: cpu.sp,
                stack: cpu.stack,
                ui: Belt_Array.make(32, Belt_Array.make(64, 0)),
                keys: cpu.keys,
                halted: cpu.halted
              };
    case /* RET */1 :
        return {
                memory: cpu.memory,
                v: cpu.v,
                i: cpu.i,
                dt: cpu.dt,
                st: cpu.st,
                pc: cpu.stack[cpu.sp],
                sp: cpu.sp - 1 | 0,
                stack: cpu.stack,
                ui: cpu.ui,
                keys: cpu.keys,
                halted: cpu.halted
              };
    case /* JP_addr */2 :
        return {
                memory: cpu.memory,
                v: cpu.v,
                i: cpu.i,
                dt: cpu.dt,
                st: cpu.st,
                pc: getVariable({
                      TAG: /* NNN */2,
                      _0: opcode
                    }),
                sp: cpu.sp,
                stack: cpu.stack,
                ui: cpu.ui,
                keys: cpu.keys,
                halted: cpu.halted
              };
    case /* CALL_addr */3 :
        var sp = cpu.sp + 1 | 0;
        cpu.stack[sp] = cpu.pc;
        return {
                memory: cpu.memory,
                v: cpu.v,
                i: cpu.i,
                dt: cpu.dt,
                st: cpu.st,
                pc: getVariable({
                      TAG: /* NNN */2,
                      _0: opcode
                    }),
                sp: sp,
                stack: cpu.stack,
                ui: cpu.ui,
                keys: cpu.keys,
                halted: cpu.halted
              };
    case /* SE_Vx_byte */4 :
        if (cpu.v[getVariable({
                    TAG: /* X */3,
                    _0: opcode
                  })] === getVariable({
                TAG: /* KK */0,
                _0: opcode
              })) {
          return {
                  memory: cpu.memory,
                  v: cpu.v,
                  i: cpu.i,
                  dt: cpu.dt,
                  st: cpu.st,
                  pc: cpu.pc + 2 | 0,
                  sp: cpu.sp,
                  stack: cpu.stack,
                  ui: cpu.ui,
                  keys: cpu.keys,
                  halted: cpu.halted
                };
        } else {
          return cpu;
        }
    case /* SNE_Vx_byte */5 :
        if (cpu.v[getVariable({
                    TAG: /* X */3,
                    _0: opcode
                  })] !== getVariable({
                TAG: /* KK */0,
                _0: opcode
              })) {
          return {
                  memory: cpu.memory,
                  v: cpu.v,
                  i: cpu.i,
                  dt: cpu.dt,
                  st: cpu.st,
                  pc: cpu.pc + 2 | 0,
                  sp: cpu.sp,
                  stack: cpu.stack,
                  ui: cpu.ui,
                  keys: cpu.keys,
                  halted: cpu.halted
                };
        } else {
          return cpu;
        }
    case /* SE_Vx_Vy */6 :
        if (cpu.v[getVariable({
                    TAG: /* X */3,
                    _0: opcode
                  })] === cpu.v[getVariable({
                    TAG: /* Y */4,
                    _0: opcode
                  })]) {
          return {
                  memory: cpu.memory,
                  v: cpu.v,
                  i: cpu.i,
                  dt: cpu.dt,
                  st: cpu.st,
                  pc: cpu.pc + 2 | 0,
                  sp: cpu.sp,
                  stack: cpu.stack,
                  ui: cpu.ui,
                  keys: cpu.keys,
                  halted: cpu.halted
                };
        } else {
          return cpu;
        }
    case /* LD_Vx_byte */7 :
        cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })] = getVariable({
              TAG: /* KK */0,
              _0: opcode
            });
        return cpu;
    case /* ADD_Vx_byte */8 :
        var vx = cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })];
        cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })] = vx + getVariable({
              TAG: /* KK */0,
              _0: opcode
            }) | 0;
        return cpu;
    case /* LD_Vx_Vy */9 :
        var vy = cpu.v[getVariable({
                  TAG: /* Y */4,
                  _0: opcode
                })];
        cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })] = vy;
        return cpu;
    case /* OR_Vx_Vy */10 :
        var _or = cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })] | cpu.v[getVariable({
                  TAG: /* Y */4,
                  _0: opcode
                })];
        cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })] = _or;
        return cpu;
    case /* AND_Vx_Vy */11 :
        var _and = cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })] & cpu.v[getVariable({
                  TAG: /* Y */4,
                  _0: opcode
                })];
        cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })] = _and;
        return cpu;
    case /* XOR_Vx_Vy */12 :
        var _xor = cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })] ^ cpu.v[getVariable({
                  TAG: /* Y */4,
                  _0: opcode
                })];
        cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })] = _xor;
        return cpu;
    case /* ADD_Vx_Vy */13 :
        var x = cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })];
        var y = cpu.v[getVariable({
                  TAG: /* Y */4,
                  _0: opcode
                })];
        cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })] = x + y | 0;
        cpu.v[15] = (x + y | 0) > 255 ? 1 : 0;
        return cpu;
    case /* SUB_Vx_Vy */14 :
        var x$1 = cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })];
        var y$1 = cpu.v[getVariable({
                  TAG: /* Y */4,
                  _0: opcode
                })];
        cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })] = x$1 - y$1 | 0;
        cpu.v[15] = x$1 > y$1 ? 1 : 0;
        return cpu;
    case /* SHR_Vx_Vy */15 :
        var x$2 = cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })];
        cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })] = (x$2 >>> 1);
        cpu.v[15] = (x$2 & 1) === 1 ? 1 : 0;
        return cpu;
    case /* SUBN_Vx_Vy */16 :
        var x$3 = cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })];
        var y$2 = cpu.v[getVariable({
                  TAG: /* Y */4,
                  _0: opcode
                })];
        cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })] = y$2 - x$3 | 0;
        cpu.v[15] = y$2 > x$3 ? 1 : 0;
        return cpu;
    case /* SHL_Vx */17 :
        var x$4 = cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })];
        cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })] = (x$4 << 1);
        cpu.v[15] = (x$4 >>> 7);
        return cpu;
    case /* SNE_Vx_Vy */18 :
        return {
                memory: cpu.memory,
                v: cpu.v,
                i: cpu.i,
                dt: cpu.dt,
                st: cpu.st,
                pc: cpu.v[getVariable({
                          TAG: /* X */3,
                          _0: opcode
                        })] !== cpu.v[getVariable({
                          TAG: /* Y */4,
                          _0: opcode
                        })] ? cpu.pc + 2 | 0 : cpu.pc,
                sp: cpu.sp,
                stack: cpu.stack,
                ui: cpu.ui,
                keys: cpu.keys,
                halted: cpu.halted
              };
    case /* LD_I_addr */19 :
        return {
                memory: cpu.memory,
                v: cpu.v,
                i: getVariable({
                      TAG: /* NNN */2,
                      _0: opcode
                    }),
                dt: cpu.dt,
                st: cpu.st,
                pc: cpu.pc,
                sp: cpu.sp,
                stack: cpu.stack,
                ui: cpu.ui,
                keys: cpu.keys,
                halted: cpu.halted
              };
    case /* JP_V0_addr */20 :
        return {
                memory: cpu.memory,
                v: cpu.v,
                i: cpu.i,
                dt: cpu.dt,
                st: cpu.st,
                pc: getVariable({
                      TAG: /* NNN */2,
                      _0: opcode
                    }) + cpu.v[0] | 0,
                sp: cpu.sp,
                stack: cpu.stack,
                ui: cpu.ui,
                keys: cpu.keys,
                halted: cpu.halted
              };
    case /* RND_Vx_byte */21 :
        cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })] = Js_math.random_int(0, 255) & getVariable({
              TAG: /* KK */0,
              _0: opcode
            });
        return cpu;
    case /* DRW_Vx_Vy_n */22 :
        var x$5 = cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })];
        var y$3 = cpu.v[getVariable({
                  TAG: /* Y */4,
                  _0: opcode
                })];
        var n = getVariable({
              TAG: /* N */1,
              _0: opcode
            });
        cpu.v[15] = 0;
        for(var spriteX = 0; spriteX <= n; ++spriteX){
          var spriteRow = cpu.memory[cpu.i + spriteX | 0];
          for(var bit = 0; bit <= 7; ++bit){
            var pixel = ((spriteRow & (1 << (7 - bit | 0))) >>> (7 - bit | 0)) | 0;
            var w = (x$5 + bit | 0) % 64;
            var h = (y$3 + spriteX | 0) % 32;
            if ((Caml_array.get(Caml_array.get(cpu.ui, h), w) & pixel) === 1) {
              cpu.v[15] = 1;
            }
            Caml_array.set(Caml_array.get(cpu.ui, h), w, Caml_array.get(Caml_array.get(cpu.ui, h), w) ^ pixel);
          }
        }
        return cpu;
    case /* SKP_Vx */23 :
        var x$6 = cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })];
        var match = Caml_array.get(cpu.keys, x$6);
        if (match) {
          return {
                  memory: cpu.memory,
                  v: cpu.v,
                  i: cpu.i,
                  dt: cpu.dt,
                  st: cpu.st,
                  pc: cpu.pc + 2 | 0,
                  sp: cpu.sp,
                  stack: cpu.stack,
                  ui: cpu.ui,
                  keys: cpu.keys,
                  halted: cpu.halted
                };
        } else {
          return cpu;
        }
    case /* SKNP_Vx */24 :
        var x$7 = cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })];
        var match$1 = Caml_array.get(cpu.keys, x$7);
        if (match$1) {
          return cpu;
        } else {
          return {
                  memory: cpu.memory,
                  v: cpu.v,
                  i: cpu.i,
                  dt: cpu.dt,
                  st: cpu.st,
                  pc: cpu.pc + 2 | 0,
                  sp: cpu.sp,
                  stack: cpu.stack,
                  ui: cpu.ui,
                  keys: cpu.keys,
                  halted: cpu.halted
                };
        }
    case /* LD_Vx_DT */25 :
        cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })] = cpu.dt;
        return cpu;
    case /* LD_Vx_K */26 :
        return {
                memory: cpu.memory,
                v: cpu.v,
                i: cpu.i,
                dt: cpu.dt,
                st: cpu.st,
                pc: cpu.pc,
                sp: cpu.sp,
                stack: cpu.stack,
                ui: cpu.ui,
                keys: cpu.keys,
                halted: true
              };
    case /* LD_DT_Vx */27 :
        return {
                memory: cpu.memory,
                v: cpu.v,
                i: cpu.i,
                dt: cpu.v[getVariable({
                          TAG: /* X */3,
                          _0: opcode
                        })],
                st: cpu.st,
                pc: cpu.pc,
                sp: cpu.sp,
                stack: cpu.stack,
                ui: cpu.ui,
                keys: cpu.keys,
                halted: cpu.halted
              };
    case /* LD_ST_Vx */28 :
        return {
                memory: cpu.memory,
                v: cpu.v,
                i: cpu.i,
                dt: cpu.dt,
                st: cpu.v[getVariable({
                          TAG: /* X */3,
                          _0: opcode
                        })],
                pc: cpu.pc,
                sp: cpu.sp,
                stack: cpu.stack,
                ui: cpu.ui,
                keys: cpu.keys,
                halted: cpu.halted
              };
    case /* ADD_I_Vx */29 :
        return {
                memory: cpu.memory,
                v: cpu.v,
                i: cpu.i + cpu.v[getVariable({
                          TAG: /* X */3,
                          _0: opcode
                        })] | 0,
                dt: cpu.dt,
                st: cpu.st,
                pc: cpu.pc,
                sp: cpu.sp,
                stack: cpu.stack,
                ui: cpu.ui,
                keys: cpu.keys,
                halted: cpu.halted
              };
    case /* LD_F_Vx */30 :
        return {
                memory: cpu.memory,
                v: cpu.v,
                i: Math.imul(cpu.v[getVariable({
                              TAG: /* X */3,
                              _0: opcode
                            })], 5),
                dt: cpu.dt,
                st: cpu.st,
                pc: cpu.pc,
                sp: cpu.sp,
                stack: cpu.stack,
                ui: cpu.ui,
                keys: cpu.keys,
                halted: cpu.halted
              };
    case /* LD_B_Vx */31 :
        var x$8 = cpu.v[getVariable({
                  TAG: /* X */3,
                  _0: opcode
                })];
        var hundreds = Math.imul((x$8 / 100 | 0) % 10, 100);
        var tens = Math.imul((x$8 / 10 | 0) % 10, 10);
        var ones = (x$8 / 1 | 0) % 10;
        cpu.v[cpu.i] = hundreds;
        cpu.v[cpu.i + 1 | 0] = tens;
        cpu.v[cpu.i + 2 | 0] = ones;
        return cpu;
    case /* LD_I_Vx */32 :
        for(var v = 0 ,v_finish = cpu.v[getVariable({
                    TAG: /* X */3,
                    _0: opcode
                  })]; v <= v_finish; ++v){
          cpu.memory[cpu.i + v | 0] = cpu.v[v];
        }
        return cpu;
    case /* LD_Vx_I */33 :
        for(var v$1 = 0 ,v_finish$1 = cpu.v[getVariable({
                    TAG: /* X */3,
                    _0: opcode
                  })]; v$1 <= v_finish$1; ++v$1){
          cpu.v[v$1] = cpu.memory[cpu.i + v$1 | 0];
        }
        return cpu;
    
  }
}

function cycle(cpu) {
  var match = $$fetch(cpu);
  var decoded = Instruction.get(match[1]);
  var cpu$1 = execute(match[0], decoded);
  setTimeout((function (param) {
          return cycle(cpu$1);
        }), 200);
  
}

function init(rom) {
  console.log("Starting CPU");
  return cycle(loadFontSet(loadRom(rom)));
}

var memory_offset = 512;

var fps = 15;

var uiDimension = {
  width: 64,
  height: 32
};

exports.memory_offset = memory_offset;
exports.fps = fps;
exports.uiDimension = uiDimension;
exports.getVariable = getVariable;
exports.getEmpty = getEmpty;
exports.loadFontSet = loadFontSet;
exports.Rom_not_found = Rom_not_found;
exports.loadRom = loadRom;
exports.$$fetch = $$fetch;
exports.decode = decode;
exports.execute = execute;
exports.cycle = cycle;
exports.init = init;
/* getEmpty Not a pure module */
