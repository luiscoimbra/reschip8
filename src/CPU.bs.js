// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function getEmpty(param) {
  return {
          memory: new Uint8Array(4096),
          v: new Uint8Array(16),
          i: 0,
          dt: 0,
          st: 0,
          pc: 200,
          sp: 0,
          stack: new Uint16Array(16),
          ui: Belt_Array.make(32, Belt_Array.make(64, 0)),
          key: -1,
          halted: false
        };
}

function loadRom(romBuffer) {
  if (romBuffer === undefined) {
    return getEmpty(undefined);
  }
  var match = getEmpty(undefined);
  var memory = match.memory;
  for(var i = 0 ,i_finish = romBuffer.length; i < i_finish; ++i){
    memory[512 + i | 0] = Caml_format.caml_int_of_string("0x" + Caml_array.get(romBuffer, i));
  }
  var init = getEmpty(undefined);
  return {
          memory: memory,
          v: init.v,
          i: init.i,
          dt: init.dt,
          st: init.st,
          pc: init.pc,
          sp: init.sp,
          stack: init.stack,
          ui: init.ui,
          key: init.key,
          halted: init.halted
        };
}

function $$fetch(param) {
  return "impl";
}

function decode(param) {
  return "impl";
}

function execute(param) {
  return "impl";
}

var memory_offset = 512;

exports.memory_offset = memory_offset;
exports.getEmpty = getEmpty;
exports.loadRom = loadRom;
exports.$$fetch = $$fetch;
exports.decode = decode;
exports.execute = execute;
/* No side effect */
